{"repository_name":"lru-cache","body":"# LRU cache\n\n[![CI Status](https://github.com/Nicolab/crystal-lru-cache/workflows/CI/badge.svg?branch=master)](https://github.com/Nicolab/crystal-lru-cache/actions) [![GitHub release](https://img.shields.io/github/release/Nicolab/crystal-lru-cache.svg)](https://github.com/Nicolab/crystal-lru-cache/releases) [![Docs](https://img.shields.io/badge/docs-available-brightgreen.svg)](https://nicolab.github.io/crystal-lru-cache/)\n\n:gem: Key/value LRU cache that supports lifecycle, global size limit and expiration time.\n\n> LRU: Least Recently Used\n\n_lru-cache_ supports lifecycle, a global item size limit and an expiration time can be set for each item independently.\n\nIf a *max_size* is defined, the LRU cache can only contain *max_size* items.\nBeyond *max_size*, items are deleted from the oldest to the most recently used.\n\nA caching system is a vital part, it must be simple to use, reliable and efficient. _lru-cache_ is battle tested ðŸ‘Œ\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n```yaml\n   dependencies:\n     lru-cache:\n       github: nicolab/crystal-lru-cache\n       version: ~> 1.0.1 # Check the latest version!\n```\n\n2. Run `shards install`\n\n## Usage\n\n```crystal\nrequire \"lru-cache\"\n\ncache = LRUCache(String, String).new(max_size: 10_000)\n\ncache.set(\"hello\", \"Hello Crystal!\")\nputs cache.get(\"hello\") # => \"Hello Crystal!\"\n\n# or\nputs cache[\"hello\"] # => \"Hello Crystal!\"\n\nputs cache.has?(\"hello\") # => true\n\n# Time limit\ncache.set(\"hello\", \"Hello Crystal!\", Time.utc + 1.hour)\n\nputs cache.expire_at \"hello\" # => Time.utc + 1.hour\n\n# Deletes \"hello\" item\ncache.delete \"hello\"\n\n# Empties the cache\ncache.clear\n```\n\nLifecycle:\n\n```crystal\nrequire \"lru-cache\"\n\nclass Cache(K, V) < LRUCache(K, V)\n  # Optional lifecycle method to be executed after setting an item (`add!` and `set`).\n  private def after_set(key : K, item : Tuple(V, Time?))\n    puts \"after_set: #{key}\"\n    pp item\n  end\n\n  # Optional lifecycle method to be executed after deleting an item (`delete`).\n  private def after_delete(key : K, item : Tuple(V, Time?)?)\n    puts \"after_delete: #{key}\"\n    pp item\n  end\n\n  # Optional lifecycle method to be executed after clearing all the cache (`clear`).\n  private def after_clear\n    puts \"after_clear\"\n  end\nend\n\ncache = Cache(String, String).new(max_size: 10_000)\n\ncache.set(\"hello\", \"Hello Crystal!\")\ncache.set(\"foo\", \"bar\")\ncache.delete(\"foo\")\ncache.clear\n```\n\nðŸ“˜ [API doc](https://nicolab.github.io/crystal-lru-cache/)\n\n## Development\n\nInstall dev dependencies:\n\n```sh\nshards install\n```\n\nRun:\n\n```sh\ncrystal spec\n```\n\nClean before commit:\n\n```sh\ncrystal tool format\n./bin/ameba\n```\n\n## Contributing\n\n1. Fork it (https://github.com/Nicolab/crystal-lru-cache/fork)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## LICENSE\n\n[MIT](https://github.com/Nicolab/crystal-lru-cache/blob/master/LICENSE) (c) 2021, Nicolas Talle.\n\n## Author\n\n| [![Nicolas Tallefourtane - Nicolab.net](https://www.gravatar.com/avatar/d7dd0f4769f3aa48a3ecb308f0b457fc?s=64)](https://github.com/sponsors/Nicolab) |\n|---|\n| [Nicolas Talle](https://github.com/sponsors/Nicolab) |\n| [![Make a donation via Paypal](https://www.paypalobjects.com/en_US/i/btn/btn_donate_SM.gif)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=PGRH4ZXP36GUC) |\n","program":{"html_id":"lru-cache/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"lru-cache","program":true,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"lru-cache/LRUCache","path":"LRUCache.html","kind":"class","full_name":"LRUCache(K, V)","name":"LRUCache","abstract":false,"superclass":{"html_id":"lru-cache/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"lru-cache/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"lru-cache/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"lru-cache","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"LRU cache (Least Recently Used).\n`LRUCache` supports lifecycle, a global item size limit\nand an expiration time can be set for each item.\n\nIf a *max_size* is defined, the LRU cache can only contain *max_size* items.\nBeyond *max_size*, items are deleted from the oldest to the most recently used.","summary":"<p>LRU cache (Least Recently Used).</p>","class_methods":[],"constructors":[{"id":"new(*,max_size:Int32?=nil)-class-method","html_id":"new(*,max_size:Int32?=nil)-class-method","name":"new","doc":"Creates a new LRUCache instance.\nIf *max_size* is defined, the LRU cache can only contain *max_size* items.\nBeyond *max_size*, items are deleted from the oldest to the most recently used.","summary":"<p>Creates a new LRUCache instance.</p>","abstract":false,"args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"max_size","doc":null,"default_value":"nil","external_name":"max_size","restriction":"Int32 | ::Nil"}],"args_string":"(*, max_size : Int32? = <span class=\"n\">nil</span>)","args_html":"(*, max_size : Int32? = <span class=\"n\">nil</span>)","location":{"filename":"src/lru-cache.cr","line_number":18,"url":null},"def":{"name":"new","args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"max_size","doc":null,"default_value":"nil","external_name":"max_size","restriction":"Int32 | ::Nil"}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = LRUCache(K, V).allocate\n_.initialize(max_size: max_size)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"[](key:K):V-instance-method","html_id":"[](key:K):V-instance-method","name":"[]","doc":"Same as `get!(key)`.","summary":"<p>Same as <code><a href=\"LRUCache.html#get!(key:K):V-instance-method\">#get!(key)</a></code>.</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"}],"args_string":"(key : K) : V","args_html":"(key : K) : V","location":{"filename":"src/lru-cache.cr","line_number":23,"url":null},"def":{"name":"[]","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"V","visibility":"Public","body":"get!(key)"}},{"id":"[]=(key:K,item:Tuple(V,Time?)):LRUCache-instance-method","html_id":"[]=(key:K,item:Tuple(V,Time?)):LRUCache-instance-method","name":"[]=","doc":"Same as `set!(key, item)`","summary":"<p>Same as <code>set!(key, item)</code></p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"},{"name":"item","doc":null,"default_value":"","external_name":"item","restriction":"Tuple(V, Time | ::Nil)"}],"args_string":"(key : K, item : Tuple(V, Time?)) : LRUCache","args_html":"(key : K, item : Tuple(V, Time?)) : <a href=\"LRUCache.html\">LRUCache</a>","location":{"filename":"src/lru-cache.cr","line_number":33,"url":null},"def":{"name":"[]=","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"},{"name":"item","doc":null,"default_value":"","external_name":"item","restriction":"Tuple(V, Time | ::Nil)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"LRUCache","visibility":"Public","body":"set(key, item)"}},{"id":"[]=(key:K,value:V):LRUCache-instance-method","html_id":"[]=(key:K,value:V):LRUCache-instance-method","name":"[]=","doc":"Same as `set(key, value)`.","summary":"<p>Same as <code><a href=\"LRUCache.html#set(key:K,item:Tuple(V,Time?)):LRUCache-instance-method\">#set(key, value)</a></code>.</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"V"}],"args_string":"(key : K, value : V) : LRUCache","args_html":"(key : K, value : V) : <a href=\"LRUCache.html\">LRUCache</a>","location":{"filename":"src/lru-cache.cr","line_number":38,"url":null},"def":{"name":"[]=","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"V"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"LRUCache","visibility":"Public","body":"set(key, value)"}},{"id":"[]?(key:K):V?-instance-method","html_id":"[]?(key:K):V?-instance-method","name":"[]?","doc":"Same as `get(key)`.","summary":"<p>Same as <code><a href=\"LRUCache.html#get(key:K):V?-instance-method\">#get(key)</a></code>.</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"}],"args_string":"(key : K) : V?","args_html":"(key : K) : V?","location":{"filename":"src/lru-cache.cr","line_number":28,"url":null},"def":{"name":"[]?","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"V | ::Nil","visibility":"Public","body":"get(key)"}},{"id":"add!(key:K,item:Tuple(V,Time?)):LRUCache-instance-method","html_id":"add!(key:K,item:Tuple(V,Time?)):LRUCache-instance-method","name":"add!","doc":"Adds an item in the cache.\nIf *key* exists, this methods raises a *KeyError* exception.","summary":"<p>Adds an item in the cache.</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"},{"name":"item","doc":null,"default_value":"","external_name":"item","restriction":"Tuple(V, Time | ::Nil)"}],"args_string":"(key : K, item : Tuple(V, Time?)) : LRUCache","args_html":"(key : K, item : Tuple(V, Time?)) : <a href=\"LRUCache.html\">LRUCache</a>","location":{"filename":"src/lru-cache.cr","line_number":106,"url":null},"def":{"name":"add!","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"},{"name":"item","doc":null,"default_value":"","external_name":"item","restriction":"Tuple(V, Time | ::Nil)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"LRUCache","visibility":"Public","body":"if @items.has_key?(key)\n  raise(KeyError.new(\"#add! - Cannot add an item on an existing key.\"))\nend\nset(key, item)\n"}},{"id":"add!(key:K,value:V,expire_at:Time?=nil):LRUCache-instance-method","html_id":"add!(key:K,value:V,expire_at:Time?=nil):LRUCache-instance-method","name":"add!","doc":"Adds a value in the cache.\nIf *key* exists, this methods raises a *KeyError* exception.","summary":"<p>Adds a value in the cache.</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"V"},{"name":"expire_at","doc":null,"default_value":"nil","external_name":"expire_at","restriction":"Time | ::Nil"}],"args_string":"(key : K, value : V, expire_at : Time? = <span class=\"n\">nil</span>) : LRUCache","args_html":"(key : K, value : V, expire_at : Time? = <span class=\"n\">nil</span>) : <a href=\"LRUCache.html\">LRUCache</a>","location":{"filename":"src/lru-cache.cr","line_number":100,"url":null},"def":{"name":"add!","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"V"},{"name":"expire_at","doc":null,"default_value":"nil","external_name":"expire_at","restriction":"Time | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"LRUCache","visibility":"Public","body":"add!(key, {value, expire_at})"}},{"id":"clear:LRUCache-instance-method","html_id":"clear:LRUCache-instance-method","name":"clear","doc":"Empties the cache.","summary":"<p>Empties the cache.</p>","abstract":false,"args":[],"args_string":" : LRUCache","args_html":" : <a href=\"LRUCache.html\">LRUCache</a>","location":{"filename":"src/lru-cache.cr","line_number":138,"url":null},"def":{"name":"clear","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"LRUCache","visibility":"Public","body":"@items.clear\nafter_clear\nself\n"}},{"id":"delete(key:K):Tuple(V,Time?)?-instance-method","html_id":"delete(key:K):Tuple(V,Time?)?-instance-method","name":"delete","doc":"Deletes an item from the cache.\nReturns the deleted item or `nil`.","summary":"<p>Deletes an item from the cache.</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"}],"args_string":"(key : K) : Tuple(V, Time?)?","args_html":"(key : K) : Tuple(V, Time?)?","location":{"filename":"src/lru-cache.cr","line_number":113,"url":null},"def":{"name":"delete","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Tuple(V, Time | ::Nil) | ::Nil","visibility":"Public","body":"item = @items.delete(key)\nif item.nil?\nelse\n  after_delete(key, item)\nend\nitem\n"}},{"id":"expire_at!(key:K):Time?-instance-method","html_id":"expire_at!(key:K):Time?-instance-method","name":"expire_at!","doc":"Returns the expiration time of a *key*.","summary":"<p>Returns the expiration time of a <em>key</em>.</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"}],"args_string":"(key : K) : Time?","args_html":"(key : K) : Time?","location":{"filename":"src/lru-cache.cr","line_number":120,"url":null},"def":{"name":"expire_at!","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Time | ::Nil","visibility":"Public","body":"touch(key)\n@items[key][1]\n"}},{"id":"get(key:K):V?-instance-method","html_id":"get(key:K):V?-instance-method","name":"get","doc":"Get a value by its *key*.\nReturns the item value or `nil`.","summary":"<p>Get a value by its <em>key</em>.</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"}],"args_string":"(key : K) : V?","args_html":"(key : K) : V?","location":{"filename":"src/lru-cache.cr","line_number":65,"url":null},"def":{"name":"get","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"V | ::Nil","visibility":"Public","body":"if touch(key)\n  return @items[key][0]\nend"}},{"id":"get!(key:K):V-instance-method","html_id":"get!(key:K):V-instance-method","name":"get!","doc":"If *key* does not exist, this methods raises a *KeyError* exception.","summary":"<p>If <em>key</em> does not exist, this methods raises a <em>KeyError</em> exception.</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"}],"args_string":"(key : K) : V","args_html":"(key : K) : V","location":{"filename":"src/lru-cache.cr","line_number":70,"url":null},"def":{"name":"get!","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"V","visibility":"Public","body":"touch(key)\n@items[key][0]\n"}},{"id":"has?(key:K):Bool-instance-method","html_id":"has?(key:K):Bool-instance-method","name":"has?","doc":"Checks if the cache has an item by its *key*.\nThis method checks the item expiration but does not consider\nthe item to be used (the order in the LRU cache is inchanged).","summary":"<p>Checks if the cache has an item by its <em>key</em>.</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"}],"args_string":"(key : K) : Bool","args_html":"(key : K) : Bool","location":{"filename":"src/lru-cache.cr","line_number":55,"url":null},"def":{"name":"has?","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"if @items.has_key?(key)\n  return !(delete_if_expired!(key))\nend\nfalse\n"}},{"id":"items:Hash(K,Tuple(V,Time?))-instance-method","html_id":"items:Hash(K,Tuple(V,Time?))-instance-method","name":"items","doc":"Returns the `Hash` containing all items.\nThe `Hash` can be handled normally without affecting the behavior of\nthe LRU cache.","summary":"<p>Returns the <code>Hash</code> containing all items.</p>","abstract":false,"args":[],"args_string":" : Hash(K, Tuple(V, Time?))","args_html":" : Hash(K, Tuple(V, Time?))","location":{"filename":"src/lru-cache.cr","line_number":133,"url":null},"def":{"name":"items","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Hash(K, Tuple(V, Time | ::Nil))","visibility":"Public","body":"@items"}},{"id":"keys:Array(K)-instance-method","html_id":"keys:Array(K)-instance-method","name":"keys","doc":"Returns all keys.","summary":"<p>Returns all keys.</p>","abstract":false,"args":[],"args_string":" : Array(K)","args_html":" : Array(K)","location":{"filename":"src/lru-cache.cr","line_number":126,"url":null},"def":{"name":"keys","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(K)","visibility":"Public","body":"@items.keys"}},{"id":"max_size:Int32?-instance-method","html_id":"max_size:Int32?-instance-method","name":"max_size","doc":"Returns the max items allowed in the cache.","summary":"<p>Returns the max items allowed in the cache.</p>","abstract":false,"args":[],"args_string":" : Int32?","args_html":" : Int32?","location":{"filename":"src/lru-cache.cr","line_number":43,"url":null},"def":{"name":"max_size","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32 | ::Nil","visibility":"Public","body":"@max_size"}},{"id":"set(key:K,value:V,expire_at:Time?=nil):LRUCache-instance-method","html_id":"set(key:K,value:V,expire_at:Time?=nil):LRUCache-instance-method","name":"set","doc":"Sets a value in the cache.","summary":"<p>Sets a value in the cache.</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"V"},{"name":"expire_at","doc":null,"default_value":"nil","external_name":"expire_at","restriction":"Time | ::Nil"}],"args_string":"(key : K, value : V, expire_at : Time? = <span class=\"n\">nil</span>) : LRUCache","args_html":"(key : K, value : V, expire_at : Time? = <span class=\"n\">nil</span>) : <a href=\"LRUCache.html\">LRUCache</a>","location":{"filename":"src/lru-cache.cr","line_number":76,"url":null},"def":{"name":"set","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"V"},{"name":"expire_at","doc":null,"default_value":"nil","external_name":"expire_at","restriction":"Time | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"LRUCache","visibility":"Public","body":"set(key, {value, expire_at})"}},{"id":"set(key:K,item:Tuple(V,Time?)):LRUCache-instance-method","html_id":"set(key:K,item:Tuple(V,Time?)):LRUCache-instance-method","name":"set","doc":"Sets an item in the cache.","summary":"<p>Sets an item in the cache.</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"},{"name":"item","doc":null,"default_value":"","external_name":"item","restriction":"Tuple(V, Time | ::Nil)"}],"args_string":"(key : K, item : Tuple(V, Time?)) : LRUCache","args_html":"(key : K, item : Tuple(V, Time?)) : <a href=\"LRUCache.html\">LRUCache</a>","location":{"filename":"src/lru-cache.cr","line_number":81,"url":null},"def":{"name":"set","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"},{"name":"item","doc":null,"default_value":"","external_name":"item","restriction":"Tuple(V, Time | ::Nil)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"LRUCache","visibility":"Public","body":"@items.delete(key)\nif _max_size = @max_size\n  if @items.size >= _max_size\n    while @items.size >= _max_size\n      deleted_key, deleted_item = @items.shift\n      after_delete(deleted_key, deleted_item)\n    end\n  end\nend\n@items[key] = item\nafter_set(key, item)\nself\n"}},{"id":"size:Int32-instance-method","html_id":"size:Int32-instance-method","name":"size","doc":"Returns the cache size (numbers of items in the cache).","summary":"<p>Returns the cache size (numbers of items in the cache).</p>","abstract":false,"args":[],"args_string":" : Int32","args_html":" : Int32","location":{"filename":"src/lru-cache.cr","line_number":48,"url":null},"def":{"name":"size","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@items.size"}},{"id":"touch(key:K):Bool-instance-method","html_id":"touch(key:K):Bool-instance-method","name":"touch","doc":"Given that the LRU cache purge the items least-recently-used,\nthis method touches an item to consider it as recent use.\nThis makes it possible to up an old element.\nIf the item does not exist, nothing happens.\n\nReturns `true` if the existing item has been touched,\n`false` if not (because does not exist).","summary":"<p>Given that the LRU cache purge the items least-recently-used, this method touches an item to consider it as recent use.</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"}],"args_string":"(key : K) : Bool","args_html":"(key : K) : Bool","location":{"filename":"src/lru-cache.cr","line_number":151,"url":null},"def":{"name":"touch","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"K"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"if (@items.has_key?(key)) && (!(delete_if_expired!(key)))\n  @items[key] = (@items.delete(key)).not_nil!\n  return true\nend\nfalse\n"}}],"macros":[],"types":[]}]}}